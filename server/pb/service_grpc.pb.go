// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.12
// source: service.proto

package server

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ImageSearchService_Search_FullMethodName = "/ImageSearch.server.ImageSearchService/Search"
	ImageSearchService_Add_FullMethodName    = "/ImageSearch.server.ImageSearchService/Add"
)

// ImageSearchServiceClient is the client API for ImageSearchService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ImageSearchServiceClient interface {
	Search(ctx context.Context, in *ImageSearchRequest, opts ...grpc.CallOption) (*ImageSearchResponse, error)
	Add(ctx context.Context, in *ImageAddRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type imageSearchServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewImageSearchServiceClient(cc grpc.ClientConnInterface) ImageSearchServiceClient {
	return &imageSearchServiceClient{cc}
}

func (c *imageSearchServiceClient) Search(ctx context.Context, in *ImageSearchRequest, opts ...grpc.CallOption) (*ImageSearchResponse, error) {
	out := new(ImageSearchResponse)
	err := c.cc.Invoke(ctx, ImageSearchService_Search_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *imageSearchServiceClient) Add(ctx context.Context, in *ImageAddRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, ImageSearchService_Add_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ImageSearchServiceServer is the server API for ImageSearchService service.
// All implementations must embed UnimplementedImageSearchServiceServer
// for forward compatibility
type ImageSearchServiceServer interface {
	Search(context.Context, *ImageSearchRequest) (*ImageSearchResponse, error)
	Add(context.Context, *ImageAddRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedImageSearchServiceServer()
}

// UnimplementedImageSearchServiceServer must be embedded to have forward compatible implementations.
type UnimplementedImageSearchServiceServer struct {
}

func (UnimplementedImageSearchServiceServer) Search(context.Context, *ImageSearchRequest) (*ImageSearchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Search not implemented")
}
func (UnimplementedImageSearchServiceServer) Add(context.Context, *ImageAddRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Add not implemented")
}
func (UnimplementedImageSearchServiceServer) mustEmbedUnimplementedImageSearchServiceServer() {}

// UnsafeImageSearchServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ImageSearchServiceServer will
// result in compilation errors.
type UnsafeImageSearchServiceServer interface {
	mustEmbedUnimplementedImageSearchServiceServer()
}

func RegisterImageSearchServiceServer(s grpc.ServiceRegistrar, srv ImageSearchServiceServer) {
	s.RegisterService(&ImageSearchService_ServiceDesc, srv)
}

func _ImageSearchService_Search_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ImageSearchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImageSearchServiceServer).Search(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ImageSearchService_Search_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImageSearchServiceServer).Search(ctx, req.(*ImageSearchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImageSearchService_Add_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ImageAddRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImageSearchServiceServer).Add(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ImageSearchService_Add_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImageSearchServiceServer).Add(ctx, req.(*ImageAddRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ImageSearchService_ServiceDesc is the grpc.ServiceDesc for ImageSearchService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ImageSearchService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ImageSearch.server.ImageSearchService",
	HandlerType: (*ImageSearchServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Search",
			Handler:    _ImageSearchService_Search_Handler,
		},
		{
			MethodName: "Add",
			Handler:    _ImageSearchService_Add_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service.proto",
}
